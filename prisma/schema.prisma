generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  relationMode = "prisma"
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model BankAccount {
  id                     String        @id @default(cuid())
  plaidId                String        @unique
  available              Decimal?      @db.Decimal(10, 2)
  current                Decimal?      @db.Decimal(10, 2)
  isoCurrencyCode        String?
  unofficialCurrencyCode String?
  creditLimit            Int?
  mask                   String?
  name                   String
  officialName           String?
  subtype                String?
  type                   String
  creditClosingDay       Int?
  ignore                 Boolean        @default(false)
  transactions           Transaction[]
  institution            Institution   @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  institutionId          String
  user                   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String

  @@index([userId])
  @@index([institutionId])
}

model Transaction {
  id                          String                              @id @default(cuid())
  plaidId                     String?                             @unique
  accountOwner                String?
  amount                      Decimal                             @db.Decimal(10, 2)
  authorizedDatetime          String?
  checkNumber                 String?
  date                        DateTime                            @db.Date
  datetime                    DateTime?                           @db.Date
  isTransfer                  Boolean
  isoCurrencyCode             String?                             @default("USD")
  merchantName                String?
  name                        String
  note                        String                              @default("")
  paymentChannel              String?
  isPending                   Boolean                             @default(false)
  pendingTransactionId        String?
  transactionCode             String?
  unofficialCurrencyCode      String?
  source                      TransactionSource?
  personalFinanceCategoryIcon String?
  personalFinanceCategory     TransactionPersonalFinanceCategory?
  paymentMetadata             TransactionPaymentMetadata?
  location                    TransactionLocation?
  category                    TransactionCategory[]
  account                     BankAccount?                        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                   String?
  user                        User                                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String

  @@index([userId])
  @@index([accountId])
}

model TransactionSource {
  id            String      @id @default(cuid())
  type          String
  fund          Fund?       @relation(fields: [fundId], references: [id])
  fundId        String?
  budget        Budget?     @relation(fields: [budgetId], references: [id])
  budgetId      String?
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String      @unique

  @@index([transactionId])
  @@index([fundId])
  @@index([budgetId])
}

model TransactionCategory {
  id            String      @id @default(cuid())
  name          String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String      @unique

  @@index([transactionId])
}

model TransactionLocation {
  id            String      @id @default(cuid())
  address       String?
  city          String?
  country       String?
  lat           Int?
  lon           Int?
  postalCode    String?
  region        String?
  storeNumber   String?
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String      @unique

  @@index([transactionId])
}

model TransactionPaymentMetadata {
  id               String      @id @default(cuid())
  byOrderOf        String?
  payee            String?
  payer            String?
  paymentMethod    String?
  paymentProcessor String?
  ppdId            String?
  reason           String?
  referenceNumber  String?
  transaction      Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId    String      @unique

  @@index([transactionId])
}

model TransactionPersonalFinanceCategory {
  id            String      @id @default(cuid())
  primary       String?
  detailed      String?
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String      @unique

  @@index([transactionId])
}

model Institution {
  id             String               @id @default(cuid())
  name           String
  logo           Bytes?
  url            String?
  primaryColor   String?
  linkedAccounts BankAccount[]
  syncItem       InstitutionSyncItem?
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@index([userId])
}

model InstitutionSyncItem {
  id            String      @id @default(cuid())
  plaidId       String      @unique
  accessToken   String      @unique
  status        String
  cursor        String      @default("")
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  institutionId String      @unique
  updatedAt      DateTime   @default(now())

  @@index([institutionId])
}

model Budget {
  id                 String              @id @default(cuid())
  goal               Decimal             @db.Decimal(10, 2)
  icon               String
  color              String              @default("teal")
  name               String
  startDate          DateTime
  endDate            DateTime?
  sourceTransactions TransactionSource[]
  savingsFund        Fund?               @relation(fields: [savingsFundId], references: [id])
  savingsFundId      String?             @unique
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@unique([name, userId])
  @@index([userId])
  @@index([savingsFundId])
}

model Fund {
  id                 String              @id @default(cuid())
  icon               String
  color              String              @default("teal")
  name               String
  sourceTransactions TransactionSource[]
  savingsBudgets     Budget[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String

  @@unique([name, userId])
  @@index([userId])
}

model User {
  id            String           @id @default(cuid())
  role          String           @default("demo")
  isProfileComplete Boolean      @default(false)
  name          String?
  nickname      String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  preferences   UserPreferences?
  accounts      Account[]
  sessions      Session[]
  institutions  Institution[]
  bankAccounts  BankAccount[]
  transactions  Transaction[]
  funds         Fund[]
  budgets       Budget[]
}

model RequestAccess {
  id    String @id @default(cuid())
  email String
}

model UserPreferences {
  id                  String  @id @default(cuid())
  creditPercentTarget Int     @default(10)
  targetIncome        Decimal @default(0)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String  @unique

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
