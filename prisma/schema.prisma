generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model BankAccount {
  id                       String        @id @default(cuid())
  available                Decimal?      @db.Decimal(10, 2)
  current                  Decimal?      @db.Decimal(10, 2)
  iso_currency_code        String
  limit                    Int?
  unofficial_currency_code String?
  mask                     String
  name                     String
  official_name            String?
  subtype                  String
  type                     String
  statementDueDay          Int?
  user                     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String
  transactions             Transaction[]

  @@index([userId])
}

model Budget {
  id                  String        @id @default(cuid())
  goal                Decimal      @db.Decimal(10, 2)
  icon                String
  name                String
  userId              String
  isSavings           Boolean       @default(false)
  savingsFundId       String?       @unique
  savingsFund         Fund?         @relation(fields: [savingsFundId], references: [id])
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  source_transactions Transaction[]
  
  @@unique([name, userId])
  @@index([userId])
  @@index([savingsFundId])
}

model Fund {
  id                  String        @id @default(cuid())
  icon                String?
  name                String
  userId              String
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  source_transactions Transaction[]
  savingsBudgets      Budget[]
  
  @@unique([name, userId])
  @@index([userId])
}

model TransactionCategory {
  id            String      @id @default(cuid())
  name          String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
}

model Transaction {
  id                      String                @id @default(cuid())
  account                 BankAccount?          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId               String?
  account_owner           String?
  amount                  Decimal              @db.Decimal(10, 2)
  authorized_datetime     String?
  category                TransactionCategory[]
  checkNumber             String?
  date                    DateTime              @db.Date
  datetime                String?
  isSavings               Boolean?
  isTransfer              Boolean
  isoCurrencyCode         String                @default("USD")
  address                 String?
  city                    String?
  country                 String?
  lat                     String?
  lon                     String?
  postal_code             String?
  region                  String?
  store_number            String?
  merchantName            String?
  name                    String
  note                    String                @default("")
  paymentChannel          String?
  by_order_of             String?
  payee                   String?
  payer                   String?
  payment_method          String?
  payment_processor       String?
  ppd_id                  String?
  reason                  String?
  reference_number        String?
  pending                 Boolean
  pendingTransactionId    String?
  personalFinanceCategory String?
  sourceType              String?
  fundSource              Fund?                 @relation(fields: [fundSourceId], references: [id])
  fundSourceId            String?
  budgetSource            Budget?               @relation(fields: [budgetSourceId], references: [id])
  budgetSourceId          String?
  transactionCode         String?
  transactionId           String
  transactionType         String?
  unofficialCurrencyCode  String?
  userId                  String
  user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([fundSourceId])
  @@index([budgetSourceId])
  @@index([accountId])
}

model BankAccessToken {
  id     String @id @default(cuid())
  value  String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Settings {
  id                      String @id @default(cuid())
  creditPercentTarget     Int @default(10)
  userId                  String @unique
  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String            @id @default(cuid())
  name             String?
  nickname         String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  settings         Settings?
  accounts         Account[]
  sessions         Session[]
  bankAccessTokens BankAccessToken[]
  bankAccounts     BankAccount[]
  transactions     Transaction[]
  funds            Fund[]
  budgets          Budget[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
